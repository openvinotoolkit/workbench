FROM ubuntu:20.04

SHELL ["/bin/bash", "+x", "-c"]

ARG HTTP_PROXY
ARG HTTPS_PROXY

ENV http_proxy ${HTTP_PROXY}
ENV https_proxy ${HTTPS_PROXY}

ARG DB_PASSWORD
ARG RABBITMQ_PASSWORD
# ARG PACKAGE_LINK
# ARG WHEELS_LINK
# ARG WHEELS_DEV_LINK
ARG OPENVINO_OPENCV_DOWNLOAD_SERVER
ARG GOOGLE_ANALYTICS_ID

ENV DEBIAN_FRONTEND noninteractive
ENV ACCURACY_CHECKER_LOG_LEVEL ERROR
ENV GIT_PYTHON_REFRESH quiet

ENV INTEL_OPENVINO_DIR /opt/intel/openvino_2022
ENV RABBITMQ_PASSWORD ${RABBITMQ_PASSWORD}
ENV OPENVINO_WORKBENCH_ROOT ${INTEL_OPENVINO_DIR}/tools/workbench
ENV WHEELS_PATH ${OPENVINO_WORKBENCH_ROOT}/wheels
ENV OPENVINO_WORKBENCH_DATA_PATH ${OPENVINO_WORKBENCH_ROOT}/wb/data
ENV PYTHONPATH ${PYTHONPATH}:${OPENVINO_WORKBENCH_ROOT}:${OPENVINO_WORKBENCH_ROOT}/model_analyzer

ENV USER_NAME workbench
ENV USER_ID 5665
ENV GROUP_NAME ${USER_NAME}
ENV GROUP_ID ${USER_ID}
ENV HOME_FOLDER /home/${USER_NAME}

ENV GOOGLE_ANALYTICS_ID ${GOOGLE_ANALYTICS_ID}

ENV DB_PASSWORD ${DB_PASSWORD}
ENV DB_USER ${USER_NAME}
ENV DB_NAME workbench

USER root

RUN groupadd -g ${GROUP_ID} ${GROUP_NAME}
RUN useradd ${USER_NAME} -u ${USER_ID} -g ${GROUP_ID} -ms /bin/bash  && \
    chown ${USER_NAME} -R ${HOME_FOLDER}

ENV WORKBENCH_PUBLIC_DIR ${HOME_FOLDER}/.workbench
ENV WORKBENCH_POSTGRESQL_DATA_DIR ${WORKBENCH_PUBLIC_DIR}/postgresql_data_directory

ENV JUPYTER_BASE_DIR ${HOME_FOLDER}/.jupyter
ENV JUPYTER_USER_SETTINGS_DIR ${JUPYTER_BASE_DIR}/lab/user-settings
ENV JUPYTER_TUTORIALS_DIR ${WORKBENCH_PUBLIC_DIR}/tutorials
ENV NOTEBOOKS_VENV ${OPENVINO_WORKBENCH_DATA_PATH}/jupyter_env
ENV PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION python

ENV DEPENDENCIES " \
    unzip \
    git \
    python3 \
    python3-pip \
    python3-setuptools \
    python3-dev \
    python3-venv \
    libopencv-dev \
    python3-opencv \
    build-essential \
    postgresql-10 \
    rabbitmq-server \
    nginx \
    gettext-base \
    unzip \
    dpkg-dev \
    cmake \
"

# Preparing
RUN apt update && \
    apt install -y --no-install-recommends gnupg curl ca-certificates && \
    curl -L https://www.postgresql.org/media/keys/ACCC4CF8.asc -s | apt-key add - && \
    echo "deb [arch=amd64] http://apt.postgresql.org/pub/repos/apt/ focal-pgdg main" | tee /etc/apt/sources.list.d/postgresql.list && \
    apt remove -y gnupg && \
    apt clean && \
    rm -rf /var/lib/apt/lists/*

RUN sed -Ei 's/# deb-src /deb-src /' /etc/apt/sources.list && \
    apt update && \
    apt install -y --no-install-recommends ${DEPENDENCIES} && \
    apt source gettext-base && \
    apt remove -y dpkg-dev && \
    apt clean && \
    rm -rf /var/lib/apt/lists/*

# CREATE DIRECTORY FOR PUBLIC WORKBENCH ARTIFACTS
RUN mkdir -m 777 -p ${WORKBENCH_PUBLIC_DIR} && chown -R ${USER_NAME} ${WORKBENCH_PUBLIC_DIR}

WORKDIR ${INTEL_OPENVINO_DIR}
ADD --chown=workbench setupvars.sh ${INTEL_OPENVINO_DIR}/

WORKDIR ${INTEL_OPENVINO_DIR}/tools
ADD --chown=workbench workbench ${OPENVINO_WORKBENCH_ROOT}/

RUN python3 -m pip install pip==19.3.1

# COPY JUPYTER USER SETTINGS
COPY --chown=workbench workbench/docker/jupyter_config/user-settings ${JUPYTER_USER_SETTINGS_DIR}

RUN python3 -m pip install --no-cache-dir -r ${OPENVINO_WORKBENCH_ROOT}/requirements/requirements.txt && \
    python3 -m pip install --no-cache-dir -r ${OPENVINO_WORKBENCH_ROOT}/requirements/requirements_jupyter.txt && \
    python3 -m pip install --no-cache-dir -r ${OPENVINO_WORKBENCH_ROOT}/model_analyzer/requirements.txt

RUN python3 -m pip install -U pip setuptools wheel

RUN chown -R ${USER_NAME} ${WHEELS_PATH} && \
    OPENVINO_WHEEL=$(find ${WHEELS_PATH} -name "openvino-202*cp38*linux*.whl" -print -quit) && python3 -m pip install ${OPENVINO_WHEEL} && \
    OPENVINO_DEV_WHEEL=$(find ${WHEELS_PATH} -name "openvino_dev*.whl" -print -quit) && python3 -m pip install "${OPENVINO_DEV_WHEEL}"

RUN chown -R ${USER_NAME}:${GROUP_NAME} ${JUPYTER_BASE_DIR}

# Add ${USER_NAME} user to groups nginx, postgres and rabbitmq for running
# services without sudo
RUN for g in $(id -nG postgres); do gpasswd -a ${USER_NAME} ${g}; done && \
    for g in $(id -nG rabbitmq); do gpasswd -a ${USER_NAME} ${g}; done && \
    gpasswd -a ${USER_NAME} users && \
    gpasswd -a ${USER_NAME} video && \
    gpasswd -a ${USER_NAME} adm

RUN touch /var/run/nginx.pid && \
    rm -rf /etc/nginx/sites-enabled/default && \
    cp  ${OPENVINO_WORKBENCH_ROOT}/nginx/nginx.conf /etc/nginx/nginx.conf

RUN chown -R ${USER_NAME} /var/lib/postgresql /var/run/postgresql \
                          /var/lib/rabbitmq /var/log/rabbitmq /var/log/rabbitmq \
                          /var/log/nginx /var/lib/nginx /var/run/nginx.pid /etc/nginx


RUN mkdir -p ${OPENVINO_WORKBENCH_ROOT}/bundles && \
    chown -R ${USER_NAME} ${OPENVINO_WORKBENCH_ROOT}

USER ${USER_NAME}

WORKDIR ${OPENVINO_WORKBENCH_ROOT}

RUN ${OPENVINO_WORKBENCH_ROOT}/docker/scripts/configure_ov_notebooks_env.sh --notebooks_venv ${NOTEBOOKS_VENV}

ENTRYPOINT ["bash", "/opt/intel/openvino_2022/tools/workbench/docker/scripts/docker-entrypoint.sh"]
