"""Add layout for model

Revision ID: 4e80f52facfa
Revises: 844f2446fdbb
Create Date: 2021-12-14 18:35:36.967413

"""

"""
 OpenVINO DL Workbench
 Apply model layout

 Copyright (c) 2021 Intel Corporation

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
"""

import sqlalchemy as sa
from alembic import op
from sqlalchemy import Column, Integer
from sqlalchemy import orm
from sqlalchemy.dialects import postgresql
from sqlalchemy.ext.declarative import declarative_base
from typing import List

from migrations.utils import SQLEnumMigrator

# revision identifiers, used by Alembic.
revision = '4e80f52facfa'
down_revision = '844f2446fdbb'
branch_labels = None
depends_on = None


old_pipeline_types = (
    'local_accuracy',
    'remote_accuracy',
    'dev_cloud_accuracy',
    'remote_profiling',
    'local_profiling',
    'dev_cloud_profiling',
    'local_int8_calibration',
    'remote_int8_calibration',
    'dev_cloud_int8_calibration',
    'create_profiling_bundle',
    'download_log',
    'download_model',
    'deployment_manager',
    'export_project',
    'setup',
    'ping',
    'inference_test_image',
    'generate_dataset',
    'upload_dataset',
    'upload_model',
    'download_omz_model',
    'export_project_report',
    'export_inference_report',
    'local_winograd_tuning',
    'local_per_tensor_report',
    'remote_per_tensor_report',
    'local_predictions_relative_accuracy_report',
    'remote_predictions_relative_accuracy_report',
    'dev_cloud_predictions_relative_accuracy_report',
    'dev_cloud_per_tensor_report',
    'reshape_model'
)

temp_pipeline_types = tuple((*old_pipeline_types, 'configure_model'))

tmp_pipeline_type_enum_migrator = SQLEnumMigrator(
    table_column_pairs=(('pipelines', 'type'),),
    enum_name='pipelinetypeenum',
    from_types=old_pipeline_types,
    to_types=temp_pipeline_types
)

new_pipeline_types = list(set(temp_pipeline_types) - {'reshape_model'})


pipeline_type_enum_migrator = SQLEnumMigrator(
    table_column_pairs=(('pipelines', 'type'),),
    enum_name='pipelinetypeenum',
    from_types=temp_pipeline_types,
    to_types=tuple(new_pipeline_types)
)


old_pipeline_stages = (
    'accuracy',
    'preparing_setup_assets',
    'uploading_setup_assets',
    'configuring_environment',
    'collecting_available_devices',
    'collecting_system_information',
    'preparing_profiling_assets',
    'preparing_int8_calibration_assets',
    'preparing_accuracy_assets',
    'profiling',
    'getting_remote_job_result',
    'download_log',
    'int8_calibration',
    'remote_int8_calibration',
    'augment_dataset',
    'extract_dataset',
    'generate_dataset',
    'recognize_dataset',
    'validate_dataset',
    'wait_dataset_upload',
    'export_project_report',
    'export_inference_report',
    'wait_model_upload',
    'model_analyzer',
    'model_optimizer_scan',
    'convert_keras_model',
    'convert_model',
    'setup_environment',
    'download_omz_model',
    'convert_omz_model',
    'move_omz_model',
    'inference_test_image',
    'export_project',
    'winograd_tuning',
    'extract_text_dataset',
    'validate_text_dataset',
    'convert_dataset',
    'preparing_reshape_model_assets',
    'reshape_model'
)

new_pipeline_stages = (
    *old_pipeline_stages,
    'apply_model_layout'
)

pipeline_stage_enum_migrator = SQLEnumMigrator(
    table_column_pairs=(('job_execution_details', 'stage'),),
    enum_name='pipelinestageenum',
    from_types=old_pipeline_stages,
    to_types=new_pipeline_stages
)

Base = declarative_base()


class _ModelShapeConfigurationModel(Base):
    __tablename__ = 'model_shape_configurations'

    id = Column(Integer, primary_key=True, autoincrement=True)

    shape_configuration = Column(postgresql.JSON(astext_type=sa.Text()), nullable=True)


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('topologies_metadata',
                  sa.Column('layout_configuration', postgresql.JSON(astext_type=sa.Text()), nullable=True))
    op.create_table('apply_model_layout_jobs',
                    sa.Column('job_id', sa.Integer(), nullable=False),
                    sa.Column('model_id', sa.Integer(), nullable=False),
                    sa.Column('layout', postgresql.JSON(astext_type=sa.Text()), nullable=True),
                    sa.ForeignKeyConstraint(['job_id'], ['jobs.job_id'], ),
                    sa.ForeignKeyConstraint(['model_id'], ['topologies.id'], ),
                    sa.PrimaryKeyConstraint('job_id')
                    )
    # ### end Alembic commands ###

    tmp_pipeline_type_enum_migrator.upgrade()
    op.execute("UPDATE pipelines SET type='configure_model' WHERE type='reshape_model'")
    pipeline_type_enum_migrator.upgrade()
    pipeline_stage_enum_migrator.upgrade()

    op.alter_column('model_shape_configurations',
                    'shape_configuration',
                    type_=postgresql.JSON(astext_type=sa.Text()), postgresql_using='shape_configuration::text::json')
    bind = op.get_bind()
    session = orm.Session(bind=bind)

    model_shape_configurations: List[_ModelShapeConfigurationModel] = session.query(_ModelShapeConfigurationModel).all()
    for model_shape_config in model_shape_configurations:
        shape_configuration = model_shape_config.shape_configuration
        new_shape_configuration = []
        for index, input_name in enumerate(shape_configuration):
            # the index is not the same index as we have from IE.
            # There is not confidence hat index will work in IE
            new_shape_configuration.append({
                'name': input_name,
                'index': index,
                'shape': shape_configuration[input_name]
            })
        model_shape_config.shape_configuration = new_shape_configuration
        session.add(model_shape_config)
        session.flush()
    session.commit()


def downgrade():
    raise NotImplementedError(f'Downgrade is not implemented for {revision}')
