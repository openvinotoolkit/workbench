"""Integrate accuracy report with auto annotation

Revision ID: 5181f24c23aa
Revises: 810f7e51911d
Create Date: 2021-07-22 19:38:41.741133

"""

"""
 OpenVINO DL Workbench
 Migration: Integrate accuracy report with auto annotation

 Copyright (c) 2021 Intel Corporation

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
"""

from contextlib import closing
from typing import List

import sqlalchemy as sa
from alembic import op
from sqlalchemy import orm
from sqlalchemy.ext.declarative import declarative_base

from migrations.utils import SQLEnumMigrator

# revision identifiers, used by Alembic.
revision = '5181f24c23aa'
down_revision = '810f7e51911d'
branch_labels = None
depends_on = None

old_pipeline_types = (
    'accuracy',
    'remote_profiling',
    'local_profiling',
    'dev_cloud_profiling',
    'local_int8_calibration',
    'remote_int8_calibration',
    'dev_cloud_int8_calibration',
    'create_profiling_bundle',
    'download_log',
    'download_model',
    'deployment_manager',
    'export_project',
    'setup',
    'ping',
    'inference_test_image',
    'generate_dataset',
    'upload_dataset',
    'upload_model',
    'download_omz_model',
    'export_project_report',
    'export_inference_report',
    'local_winograd_tuning',
    'annotate_dataset',
    'per_tensor_report',
)

new_pipeline_types = (
    *old_pipeline_types,
    'predictions_relative_accuracy_report'
)

pipeline_type_enum_migrator = SQLEnumMigrator(
    table_column_pairs=(('pipelines', 'type'),),
    enum_name='pipelinetypeenum',
    from_types=old_pipeline_types,
    to_types=new_pipeline_types
)


Base = declarative_base()


class _JobsModel(Base):
    __tablename__ = 'jobs'

    job_type = sa.Column(sa.String(50))

    __mapper_args__ = {
        'polymorphic_identity': 'job',
        'polymorphic_on': job_type
    }

    job_id = sa.Column(sa.Integer, primary_key=True, autoincrement=True)
    project_id = sa.Column(sa.Integer, nullable=True)


class _AccuracyJobModel(_JobsModel):
    __tablename__ = 'accuracy_jobs'

    __mapper_args__ = {
        'polymorphic_identity': 'AccuracyJob',
    }

    job_id = sa.Column(sa.Integer, sa.ForeignKey('jobs.job_id'), primary_key=True)
    accuracy = sa.Column(sa.Float, nullable=True)
    accuracy_config = sa.Column(sa.Text, nullable=True)
    target_dataset_id = sa.Column(sa.Integer, sa.ForeignKey('datasets.id'), nullable=False)


class _ProjectModel(Base):
    __tablename__ = 'projects'

    id = sa.Column(sa.Integer, primary_key=True, autoincrement=True)
    dataset_id = sa.Column(sa.Integer, sa.ForeignKey('datasets.id'), nullable=False)


class _DatasetModel(Base):
    __tablename__ = 'datasets'

    id = sa.Column(sa.Integer, primary_key=True)


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('accuracy_jobs', sa.Column('target_dataset_id', sa.Integer(), nullable=True))
    op.create_foreign_key('accuracy_jobs_target_dataset_id_fkey', 'accuracy_jobs', 'datasets', ['target_dataset_id'],
                          ['id'])
    # ### end Alembic commands ###

    pipeline_type_enum_migrator.upgrade()

    # Data migration - filling non-nullable field `target_dataset_id`
    bind = op.get_bind()
    session = orm.Session(bind=bind)
    with closing(session) as session:
        accuracy_job_models: List[_AccuracyJobModel] = session.query(_AccuracyJobModel).all()
        for accuracy_job_model in accuracy_job_models:
            if accuracy_job_model.project_id:
                project_model: _ProjectModel = session.query(_ProjectModel).get(accuracy_job_model.project_id)
                accuracy_job_model.target_dataset_id = project_model.dataset_id
                session.add(accuracy_job_model)
                session.flush()
    op.alter_column(table_name='accuracy_jobs', column_name='target_dataset_id', nullable=False)


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint('accuracy_jobs_target_dataset_id_fkey', 'accuracy_jobs', type_='foreignkey')
    op.drop_column('accuracy_jobs', 'target_dataset_id')
    # ### end Alembic commands ###

    pipeline_type_enum_migrator.downgrade()
