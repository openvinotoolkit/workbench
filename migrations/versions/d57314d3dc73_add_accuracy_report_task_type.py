"""add_accuracy_report_task_type

Revision ID: d57314d3dc73
Revises: da69e89ee524
Create Date: 2022-02-08 15:44:36.714890

"""

"""
 OpenVINO DL Workbench
 Migration: add_accuracy_report_task_type

 Copyright (c) 2022 Intel Corporation

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
"""
from typing import Optional

import sqlalchemy as sa
from alembic import op
from sqlalchemy import Column, Integer, ForeignKey, orm
from sqlalchemy.dialects import postgresql
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import Session

# revision identifiers, used by Alembic.
revision = 'd57314d3dc73'
down_revision = 'da69e89ee524'
branch_labels = None
depends_on = None

taskenum = postgresql.ENUM('classification', 'object_detection', 'instance_segmentation', 'semantic_segmentation',
                           'inpainting', 'style_transfer', 'super_resolution', 'face_recognition', 'landmark_detection',
                           'generic', 'custom', 'text_classification', 'textual_entailment', name='taskenum',
                           create_type=False)

Base = declarative_base()


class _AccuracyReportModel(Base):
    __tablename__ = 'accuracy_reports'

    id = Column(Integer, primary_key=True, autoincrement=True)

    task_type = Column(taskenum, nullable=True)


class _ClassificationAccuracyReportEntityModel(Base):
    __tablename__ = 'classification_accuracy_report_entities'
    task_type = 'classification'

    id = Column(Integer, primary_key=True, autoincrement=True)

    report_id = Column(Integer, ForeignKey('accuracy_reports.id'))


class _DetectionAccuracyReportEntityModel(Base):
    __tablename__ = 'detection_accuracy_report_entities'
    task_type = 'object_detection'

    id = Column(Integer, primary_key=True, autoincrement=True)

    report_id = Column(Integer, ForeignKey('accuracy_reports.id'))


class _InstanceSegmentationAccuracyReportEntityModel(Base):
    __tablename__ = 'instance_segmentation_accuracy_report_entities'
    task_type = 'instance_segmentation'

    id = Column(Integer, primary_key=True, autoincrement=True)

    report_id = Column(Integer, ForeignKey('accuracy_reports.id'))


class _SemanticSegmentationAccuracyReportEntityModel(Base):
    __tablename__ = 'semantic_segmentation_accuracy_report_entities'
    task_type = 'semantic_segmentation'

    id = Column(Integer, primary_key=True, autoincrement=True)

    report_id = Column(Integer, ForeignKey('accuracy_reports.id'))


def detect_accuracy_report_task_type(session: Session, report_id: int) -> Optional[str]:
    entity_models = [
        _ClassificationAccuracyReportEntityModel,
        _DetectionAccuracyReportEntityModel,
        _InstanceSegmentationAccuracyReportEntityModel,
        _SemanticSegmentationAccuracyReportEntityModel
    ]
    for entity_model in entity_models:
        entity = session.query(entity_model).filter_by(report_id=report_id).first()
        if entity:
            return entity_model.task_type

    return None


def upgrade():
    bind = op.get_bind()
    session = orm.Session(bind=bind)

    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('accuracy_reports', sa.Column('task_type', taskenum, nullable=True))
    # ### end Alembic commands ###

    reports = session.query(_AccuracyReportModel).all()

    for report in reports:
        task_type = detect_accuracy_report_task_type(session, report_id=report.id)
        report.task_type = task_type
        session.add(report)
        session.flush()


def downgrade():
    raise NotImplementedError(f'Downgrade is not implemented for the {revision} migration')
