"""Environment for models

Revision ID: a51e30ac4654
Revises: 53845388c5b8
Create Date: 2021-04-29 15:24:42.817136

"""

"""
 OpenVINO DL Workbench
 Migration: Environment for models

 Copyright (c) 2021 Intel Corporation

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
"""
import sqlalchemy as sa
from alembic import op

from migrations.utils import SQLEnumMigrator

# revision identifiers, used by Alembic.
revision = 'a51e30ac4654'
down_revision = '53845388c5b8'
branch_labels = None
depends_on = None

old_pipeline_stages = (
    'accuracy',
    'preparing_setup_assets',
    'uploading_setup_assets',
    'configuring_environment',
    'collecting_available_devices',
    'collecting_system_information',
    'preparing_profiling_assets',
    'preparing_int8_calibration_assets',
    'profiling',
    'getting_remote_job_result',
    'download_log',
    'int8_calibration',
    'remote_int8_calibration',
    'model_analyzer',
    'generate_dataset',
    'wait_dataset_upload',
    'extract_dataset',
    'recognize_dataset',
    'validate_dataset',
    'export_project_report',
    'export_inference_report',
    'inference_test_image',
    'winograd_tuning',
    'export_project',
    'model_optimizer_scan',
    'convert_model',
    'convert_keras_model',
    'wait_model_upload',
    'download_omz_model',
    'convert_omz_model',
    'move_omz_model',
    'augment_dataset',
)

new_pipeline_stages = (
    *old_pipeline_stages,
    'setup_environment'
)

pipeline_stage_migrator = SQLEnumMigrator(
    table_column_pairs=(('job_execution_details', 'stage'),),
    enum_name='pipelinestageenum',
    from_types=old_pipeline_stages,
    to_types=new_pipeline_stages)


def upgrade():
    pipeline_stage_migrator.upgrade()
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('environments',
                    sa.Column('creation_timestamp', sa.DateTime(), nullable=False),
                    sa.Column('last_modified', sa.DateTime(), nullable=True),
                    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
                    sa.Column('path', sa.String(), nullable=True),
                    sa.Column('manifest_path', sa.String(), nullable=True),
                    sa.Column('is_ready', sa.Boolean(), nullable=False),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('dependencies',
                    sa.Column('creation_timestamp', sa.DateTime(), nullable=False),
                    sa.Column('last_modified', sa.DateTime(), nullable=True),
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('package', sa.String(), nullable=False),
                    sa.Column('version', sa.String(), nullable=False),
                    sa.Column('environment_id', sa.Integer(), nullable=False),
                    sa.ForeignKeyConstraint(['environment_id'], ['environments.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )

    op.create_table('setup_environment_jobs',
                    sa.Column('job_id', sa.Integer(), nullable=False),
                    sa.Column('model_id', sa.Integer(), nullable=False),
                    sa.ForeignKeyConstraint(['job_id'], ['jobs.job_id'], ),
                    sa.ForeignKeyConstraint(['model_id'], ['topologies.id'], ),
                    sa.PrimaryKeyConstraint('job_id')
                    )

    op.add_column('topologies', sa.Column('environment_id', sa.Integer(), nullable=True))
    op.add_column('topologies', sa.Column('manifest_path', sa.String(), nullable=True))
    op.create_foreign_key(None, 'topologies', 'environments', ['environment_id'], ['id'])
    # ### end Alembic commands ###


def downgrade():
    raise NotImplementedError(f'Downgrade function is not implemented for {revision} revision')
