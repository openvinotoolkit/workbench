"""generate_accuracy_reports_for_accuracy_jobs

Revision ID: bc1a7d48829c
Revises: 06bb10328413
Create Date: 2021-08-20 09:39:59.061185

"""

"""
 OpenVINO DL Workbench
 Migrate data for accuracy result from accuracy jobs to reports

 Copyright (c) 2021 Intel Corporation

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
"""
# revision identifiers, used by Alembic.
import datetime
from typing import Optional

import sqlalchemy
from alembic import op
from sqlalchemy import orm, Column, String, Integer, ForeignKey, Float, DateTime
from sqlalchemy.dialects import postgresql
from sqlalchemy.ext.declarative import declarative_base

revision = 'bc1a7d48829c'
down_revision = '06bb10328413'
branch_labels = None
depends_on = None

Base = declarative_base()

accuracy_report_type_enum = postgresql.ENUM(
    'parent_model_per_tensor',
    'parent_model_predictions',
    'dataset_annotations',
    name='accuracyreporttypeenum'
)


class _JobsModel(Base):
    __tablename__ = 'jobs'

    job_type = Column(String(50))

    __mapper_args__ = {
        'polymorphic_identity': 'job',
        'polymorphic_on': job_type
    }

    job_id = Column(Integer, primary_key=True, autoincrement=True)

    project_id = Column(Integer, ForeignKey('projects.id'), nullable=True)


class _AccuracyJobsModel(_JobsModel):
    __tablename__ = 'accuracy_jobs'

    __mapper_args__ = {
        'polymorphic_identity': 'AccuracyJob'
    }

    job_id = Column(Integer, ForeignKey(_JobsModel.job_id), primary_key=True)

    accuracy = Column(Float, nullable=True)

    accuracy_report_type = Column(accuracy_report_type_enum, nullable=True)

    target_dataset_id = Column(Integer, ForeignKey('datasets.id'), nullable=False)


class _DatasetModel(Base):
    __tablename__ = 'datasets'

    id = Column(Integer, primary_key=True, autoincrement=True)


class _ProjectModel(Base):
    __tablename__ = 'projects'

    id = Column(Integer, primary_key=True, autoincrement=True)


class _AccuracyReportModel(Base):
    __tablename__ = 'accuracy_reports'

    id = Column(Integer, primary_key=True, autoincrement=True)

    report_type = Column(accuracy_report_type_enum, nullable=False)

    __mapper_args__ = {
        'polymorphic_on': report_type,
    }

    creation_timestamp = Column(DateTime, nullable=False, default=datetime.datetime.utcnow)
    last_modified = Column(DateTime, onupdate=datetime.datetime.utcnow, default=datetime.datetime.utcnow)

    metric_type = Column(String, nullable=True)

    metric_name = Column(String, nullable=True)

    accuracy_result = Column(Float, nullable=True)

    accuracy_postfix = Column(String, nullable=True)

    project_id = Column(Integer, ForeignKey('projects.id'), nullable=False)

    target_dataset_id = Column(Integer, ForeignKey('datasets.id'), nullable=False)

    # pylint: disable=too-many-arguments
    def __init__(
            self,
            project_id: int,
            report_type: str,
            metric_type: Optional[str],
            target_dataset_id: int,
            accuracy_result: float = None,
            accuracy_postfix: str = None,
            metric_name: Optional[str] = None,
    ):
        self.report_type = report_type
        self.metric_type = metric_type
        self.accuracy_result = accuracy_result
        self.accuracy_postfix = accuracy_postfix
        self.project_id = project_id
        self.target_dataset_id = target_dataset_id
        self.metric_name = metric_name


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('accuracy_reports', 'metric_type', existing_type=sqlalchemy.VARCHAR(), nullable=True)
    op.add_column('accuracy_reports',
                  sqlalchemy.Column('metric_name', sqlalchemy.VARCHAR(), autoincrement=False, nullable=True))
    # ### end Alembic commands ###

    bind = op.get_bind()
    session = orm.Session(bind=bind)

    project_ids = session.query(_AccuracyJobsModel.project_id).distinct().all()
    project_ids = [project_id[0] for project_id in project_ids]

    for project_id in project_ids:
        # find latest accuracy job
        accuracy_job = (
            session
                .query(_AccuracyJobsModel)
                .filter(
                _AccuracyJobsModel.accuracy_report_type == None,
                _AccuracyJobsModel.accuracy != None,
                _AccuracyJobsModel.project_id == project_id
            )
                .order_by(_AccuracyJobsModel.job_id.desc())
                .first()
        )

        if not accuracy_job:
            continue

        report = _AccuracyReportModel(
            project_id=accuracy_job.project_id,
            report_type='dataset_annotations',
            metric_type=None,
            target_dataset_id=accuracy_job.target_dataset_id,
            accuracy_result=accuracy_job.accuracy,
        )
        session.add(report)

    session.flush()
    op.drop_column('accuracy_jobs', 'accuracy')


def downgrade():
    raise NotImplementedError('downgrade is not supported')
